// This KQL generates a Pac-Man-like board with walls, dots, ghosts, and power pellets, all served in the classic ASCII style with a side of nostalgia.
// Do not attempt if you want to keep your sanity intact.
// ===== CONFIGURATION =====
let boardWidth = 17;  // Must be odd number (based on desired width for characters)
let boardHeight = 20; // Expanded to 20 rows
let pacman = "á—¤";     // Pac-Man symbol
let ghost = "ðŸ‘»";     // Ghost symbol
let powerPellet = "ðŸŸ¢"; // Power pellet symbol
let dot = "ðŸŸ¡";       // Dot symbol
let wall = "â”€";       // Wall symbol
let empty = " ";      // Empty space
// ========================
// Generate empty board with walls and dots
range y from 0 to boardHeight-1 step 1
| extend row = case(
    y == 0 or y == boardHeight-1, strcat("â•­", strrep(wall, boardWidth-2), "â•®"), // Top/Bottom walls
    y % 2 == 0, strcat("â”‚", strrep(dot, boardWidth-2), "â”‚"), // Dot rows
    strcat("â”‚", strrep(empty, boardWidth-2), "â”‚") // Empty rows
)
// Add characters like Pac-Man, Ghosts, and Power Pellet
| extend row = case(
    y == 1, strcat("â”‚", pacman, strrep(dot, 6), "â”‚"), // Pac-Man with dots
    y == 2, strcat("â”‚", strrep(dot, 4), ghost, strrep(dot, 6), "â”‚"), // Ghost with dots
    y == 3, strcat("â”‚", strrep(dot, 6), ghost, strrep(dot, 5), "â”‚"), // Ghost with dots
    y == 4, strcat("â”‚", strrep(dot, 3), powerPellet, strrep(dot, 9), "â”‚"), // Power Pellet
    y == 6, strcat("â”‚", strrep(dot, 6), ghost, strrep(dot, 6), "â”‚"), // Ghost with dots
    y == 7, strcat("â”‚", strrep(dot, 3), ghost, strrep(dot, 6), "â”‚"), // Ghost with dots
    y == 9, strcat("â”‚", strrep(dot, 6), ghost, strrep(dot, 6), "â”‚"), // Ghost with dots
    y == 11, strcat("â”‚", strrep(dot, 5), powerPellet, strrep(dot, 7), "â”‚"), // Power Pellet
    y == 13, strcat("â”‚", strrep(dot, 6), ghost, strrep(dot, 6), "â”‚"), // Ghost with dots
    y == 14, strcat("â”‚", strrep(dot, 3), ghost, strrep(dot, 6), "â”‚"), // Ghost with dots
    row // Default
)
// Add final walls with borders
| extend row = case(
    y == 0, strcat("â•­", strrep(wall, boardWidth-2), "â•®"), // Top wall
    y == boardHeight-1, strcat("â•°", strrep(wall, boardWidth-2), "â•¯"), // Bottom wall
    row // Default
)
| project row